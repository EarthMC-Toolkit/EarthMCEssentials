plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
}

version = "v${project.mod_version}-${project.minecraft_version}" as Object
group = project.maven_group

def localProps = new Properties()
localProps.load(new FileInputStream(rootProject.file("local.properties")))

repositories {
	mavenCentral()

	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/earthmc-toolkit/earthmc-wrapper")
		credentials {
			// NOTE TO CONTRIBUTORS:
			// You must create a `local.properties` file with the keys below.
			// You can create a token at https://github.com/settings/tokens under the "Tokens (classic)" tab.
			username = localProps.getProperty("USERNAME") // Your GitHub account name.
			password = localProps.getProperty("GITHUB_PACKAGES_TOKEN") // Your PAT with the `read:packages` permission.
		}
	}

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// TODO: Fabric API is technically optional. Do we actually need it?
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc", module: "fabric-loader")
	}

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "com.google.code.gson")
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Libraries to include in remapJar
	include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

	include modImplementation("net.kyori:adventure-platform-fabric:${project.adventure_fabric_version}") {
		exclude(group: "net.fabricmc", module: "fabric-loader")
	}

	include api("io.github.emcw:emc-wrapper:${project.emcw_version}") {
		exclude(group: "org.jetbrains")
		exclude(group: "com.google.code.gson")
		exclude(group: "org.apache.commons", module: "commons-lang3")
	}

	include 'org.apache.commons:commons-lang3:3.12.0'
	include 'com.google.code.gson:gson:2.10.1'

	//#region Plugins
	compileOnly 'org.jetbrains:annotations:24.0.1'
	annotationProcessor 'org.jetbrains:annotations:24.0.1'

	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	//#endregion
}

processResources {
	inputs.property("version", project.version)

	// Gradle doesn't like this and outputs the following error that you can safely ignore:
	// 	"Cannot resolve resource filtering of MatchingCopyAction.
	// 	IDEA may fail to build project. Consider using delegated build (enabled by default)."
	filesMatching("fabric.mod.json") {
		// Keeps the "version" property in `fabric.mod.json` file up-to-date with `gradle.properties`.
		expand("version": project.version)
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(source_jvm_version.toInteger())
		vendor = JvmVendorSpec.AZUL
	}

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.release = target_jvm_version.toInteger()
}